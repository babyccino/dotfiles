{
  "init var": {
    "prefix": "vv",
    "description": "init var",
    "body": ["${2:varName} := ${1:value}"]
  },

  "Case default": {
    "prefix": "def",
    "description": "Case default",
    "body": ["default:"]
  },

  "Close": {
    "prefix": "cl",
    "description": "Close",
    "body": ["close(${0:closable})"]
  },

  "Goroutine anonymous func": {
    "prefix": "gofunc",
    "description": "Goroutine anonymous func",
    "body": ["go func(){", "  $0", "}()"]
  },

  "Slice Remove": {
    "prefix": "sr",
    "description": "Slice Remove",
    "body": [
      "${1:slice} = append(${1:slice}[:${2:index}], ${1:slice}[${2:index}+1:]...)"
    ]
  },

  "Defer anonymous func": {
    "prefix": "defunc",
    "description": "Defer anonymous func",
    "body": ["defer func() {", "  $0", "}()"]
  },

  "if ok": {
    "prefix": "ifok",
    "description": "if ok",
    "body": ["if ${1:value}, ok := $2; ok {", "  $0", "}"]
  },

  "delete": {
    "prefix": "del",
    "description": "delete",
    "body": ["delete(${1:map}, \"${2:key}\")"]
  },

  "append": {
    "prefix": "ap",
    "description": "append",
    "body": ["${1:slice} = append(${1:slice}, ${0:element})"]
  },

  "log.Printf": {
    "prefix": "lo",
    "description": "log.Printf",
    "body": ["log.Printf(\"${1:%+v}\\n\", $0)"]
  },

  "log.Printf err": {
    "prefix": "le",
    "description": "log.Printf err",
    "body": ["log.Printf(\"${1:%+v}\\n\", err)"]
  },

  "log.Fatal": {
    "prefix": "lf",
    "description": "log.Fatal",
    "body": ["log.Fatal(${0:err})"]
  },

  "log.Fatalf": {
    "prefix": "lff",
    "description": "log.Fatalf",
    "body": ["log.Fatalf(\"${1:%+v}\\n\", ${0:err})"]
  },

  "log.Errorf": {
    "prefix": "lef",
    "description": "log.Errorf",
    "body": ["log.Errorf(\"${1:%+v}\\n\", ${0:err})"]
  },

  "fmt.Sprintf": {
    "prefix": "fms",
    "description": "fmt.Sprintf",
    "body": ["fmt.Sprintf(\"${1:%+v}\", $0)"]
  },

  "fmt.Errorf": {
    "prefix": "fme",
    "description": "fmt.Errorf",
    "body": ["fmt.Errorf(\"${1:%+v}\", ${0:err})"]
  },

  "ctx context.Context": {
    "prefix": "ctx",
    "description": "ctx context.Context",
    "body": ["ctx context.Context"]
  },

  "if error": {
    "prefix": "ier",
    "description": "if error",
    "body": ["if err != nil {", "  $0", "}"]
  },

  "errors.Is()": {
    "prefix": "is",
    "description": "errors.Is()",
    "body": ["if errors.Is(err, ${1:exec.ErrNotFound}) {", "  $0", "}"]
  },

  "errors.As()": {
    "prefix": "as",
    "description": "errors.As()",
    "body": ["var e ${1:*exec.Error}", "if errors.As(err, &e) {", "  $0", "}"]
  },

  "Error with Stack": {
    "prefix": "es",
    "description": "Error with Stack",
    "body": ["errors.WithStack(err)"]
  },

  "Error with Message": {
    "prefix": "em",
    "description": "Error with Message",
    "body": ["errors.WithMessage(err, ${0:message})"]
  },

  "Error with Messagef": {
    "prefix": "emf",
    "description": "Error with Messagef",
    "body": ["errors.WithMessagef(err, ${1:format}, ${0:args})"]
  },

  "Return Nil": {
    "prefix": "rn",
    "description": "Return Nil",
    "body": ["return nil"]
  },

  "Return Nil & err": {
    "prefix": "rne",
    "description": "Return Nil & err",
    "body": ["return nil, err"]
  },

  "Return err": {
    "prefix": "re",
    "description": "Return err",
    "body": ["return err"]
  },

  "Struct": {
    "prefix": "st",
    "description": "Struct",
    "body": ["type ${1:structName} struct {", "  $0", "}"]
  },

  "Struct Field": {
    "prefix": "sf",
    "description": "Struct Field",
    "body": ["${1:fieldName} ${2:string}"]
  },

  "Struct Tag": {
    "prefix": "stt",
    "description": "Struct Tag",
    "body": ["`${1:json}:\"${2:jsonFieldName}\"`"]
  },

  "Interface": {
    "prefix": "inte",
    "description": "Interface",
    "body": ["type ${1:interfaceName} interface {", "  $0", "}"]
  },

  "sync.Mutex Lock and defer Unlock": {
    "prefix": "lock",
    "description": "sync.Mutex Lock and defer Unlock",
    "body": ["${1:mu}.Lock()", "defer ${1:mu}.Unlock()"]
  },

  "New Constructor Method": {
    "prefix": "ne",
    "description": "New Constructor Method",
    "body": [
      "func New$1($2) *$1 {",
      "  $3",
      "  return &$1{",
      "    $0",
      "  }",
      "}"
    ]
  },

  "For Range": {
    "prefix": "fr",
    "description": "For Range",
    "body": ["for _, ${1:v} := range ${2:values} {", "  $0", "}"]
  },

  "For Range Chan": {
    "prefix": "frr",
    "description": "For Range Chan",
    "body": ["for ${1:v} := range ${2:channel} {", "  $0", "}"]
  },

  "Non-blocking Channel Send": {
    "prefix": "nb",
    "description": "Non-blocking Channel Send",
    "body": ["select {", "case $1 <- $0:", "default:", "}"]
  },

  "Testify Assert Nil": {
    "prefix": "anil",
    "description": "Testify Assert Nil",
    "body": ["assert.Nil(t, ${1:actual})", "$0"]
  },
  "Testify Assert Not Nil": {
    "prefix": "annil",
    "description": "Testify Assert Not Nil",
    "body": ["assert.NotNil(t, ${1:actual})", "$0"]
  },

  "Testify Assert Equal": {
    "prefix": "aeq",
    "description": "Testify Assert Equal",
    "body": ["assert.Equal(t, ${1:expected}, ${2:actual})", "$0"]
  },

  "Testify Assert No Error": {
    "prefix": "anerr",
    "description": "Testify Assert No Error",
    "body": ["assert.NoError(t, ${1:err})", "$0"]
  },
  "Logrus import": {
    "description": "logrus import snippet that 'overwrites' standard log lib",
    "prefix": "logrus",
    "body": ["${1:log} \"github.com/sirupsen/logrus\"", "$0"]
  }
}
